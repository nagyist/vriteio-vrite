---
import {
  Header,
  BaseHead,
  SideBar,
  SVGDefs,
  OnThisPage,
  Footer,
  ScrollbarWidth
} from "#components/fragments";
import type { MarkdownHeading } from "astro";
import { Button } from "#components/primitives";
import { useConfig, useContentSource } from "vrite:pages";

interface MenuLevel {
  label: string;
  link?: string;
  menu?: MenuLevel[];
}

const image = "https://docs.vrite.io/meta-image.png";
const title = "Vrite Ôºç developer content platform";
const description =
  "Open-Source, collaborative developer content platform for documentation, technical blogs, and more.";
const contentSource = useContentSource(Astro);
const config = useConfig(Astro);
const tree = await contentSource.getContentTree(Astro.props.group);
const flatTree = await contentSource.getFlattenContentTree(Astro.props.group);
const sections: Array<{
  label: string;
  link: string;
  icon: string;
  active?: boolean;
}> = [
  ...Object.keys(contentSource.config.groups || []).map((groupName) => {
    const group = contentSource.config.groups[groupName];

    return {
      label: group.data.label,
      link: group.data.url,
      icon: group.data.icon,
      active: groupName === Astro.props.group
    };
  }),
  ...(config.links?.map((link) => ({
    label: link.label,
    link: link.url,
    icon: link.icon,
    active: false
  })) || [])
];

const currentEntry = flatTree.find((item) =>
  Astro.url.pathname.includes(item.contentMetadata.slug)
);
const nextEntry = currentEntry ? flatTree[flatTree.indexOf(currentEntry) + 1] : null;
const prevEntry = currentEntry ? flatTree[flatTree.indexOf(currentEntry) - 1] : null;

type Props = {
  headings: MarkdownHeading[];
  group?: string;
  title: string;
  description?: string;
  hideTOC?: boolean;
};
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead
      description={Astro.props.description || description}
      title={Astro.props.title ? `${Astro.props.title} | Vrite Documentation` : title}
      image={image}
    />
    <script>
      import { scrollToElement } from "@vrite/solid-ui";

      history.scrollRestoration = "manual";
      requestAnimationFrame(() => {
        const hash = location.hash.slice(1);

        if (hash) {
          scrollToElement(`#${hash}`, "instant", { offset: 80 });
        }
      });
      window.addEventListener("hashchange", () => {
        const hash = location.hash.slice(1);

        scrollToElement(`#${hash}`, "instant", { offset: 80 });
      });
    </script>
  </head>
  <body class="overscroll-none overflow-x-hidden">
    <SVGDefs />
    <ScrollbarWidth client:only="solid-js" />
    <main
      class="flex flex-col items-center justify-center bg-gray-50 dark:bg-gray-800 min-h-screen"
    >
      <div class="flex-1 flex justify-center items-center w-full max-w-screen-2xl relative">
        <SideBar menu={tree} sections={sections} currentPath={Astro.url.pathname} client:load />
        <div class="flex overflow-visible w-full relative h-full md:max-w-[calc(100%-18rem)]">
          <div
            class="flex-1 flex overflow-visible w-full justify-center min-h-screen"
            id="container"
          >
            <div
              class="relative flex-1 prose !md:max-w-unset !xl:max-w-screen-md w-full text-lg px-4 md:px-8 pb-24 h-fit"
            >
              <div class="sticky top-0 w-full left-0 z-1"><Header client:load /></div>
              <div class="pt-24">
                {
                  (currentEntry?.branches.length || 0) > 0 && (
                    <Button
                      badge
                      color="primary"
                      variant="text"
                      class="m-0 pl-1 py-0 font-semibold"
                      hover={false}
                    >
                      {currentEntry?.branches.at(-1)?.branchName}
                    </Button>
                  )
                }
                <h1 class="font-extrabold">{Astro.props.title}</h1>
                <slot />
                <Footer
                  nextEntry={nextEntry?.contentMetadata || null}
                  previousEntry={prevEntry?.contentMetadata || null}
                />
              </div>
            </div>
            <OnThisPage headings={Astro.props.headings} hide={Astro.props.hideTOC} client:load />
          </div>
        </div>
      </div>
    </main>
  </body>
</html>
